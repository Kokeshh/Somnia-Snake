{"ast":null,"code":"// Генерирует маршрут: 5 вправо, 5 вниз, 5 влево, 5 вверх\n\nexport const BOARD_SIZE = 4;\nexport function generatePath() {\n  const path = [];\n  // 4 вправо (y=0, x=0..3)\n  for (let x = 0; x < 4; x++) path.push({\n    x,\n    y: 0\n  });\n  // 3 вниз (x=3, y=1..3)\n  for (let y = 1; y < 4; y++) path.push({\n    x: 3,\n    y\n  });\n  // 4 влево (y=3, x=3..0)\n  for (let x = 3; x >= 0; x--) path.push({\n    x,\n    y: 3\n  });\n  // 2 вверх (x=0, y=2..1)\n  for (let y = 2; y >= 1; y--) path.push({\n    x: 0,\n    y\n  });\n  console.log('generatePath length:', path.length, path);\n  return path;\n}\nfunction getRandomUnique(arr, count) {\n  const copy = [...arr];\n  for (let i = copy.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [copy[i], copy[j]] = [copy[j], copy[i]];\n  }\n  return copy.slice(0, count);\n}\nexport function generateBoard(difficulty) {\n  if (difficulty === 'easy') {\n    // Фиксированная структура для easy\n    // Индексы path: 0..12 по часовой стрелке, начиная сверху слева\n    // 0: старт, 1: 2.00x, 2: 1.30x, 3: 1.20x, 4: 1.10x, 5: 1.01x, 6: змея, 7: 1.01x, 8: 1.10x, 9: 1.20x, 10: 1.30x, 11: 2.00x, 12: 1.01x\n    const fixed = [{\n      type: 'start'\n    }, {\n      type: 'mult',\n      value: '2.00x'\n    }, {\n      type: 'mult',\n      value: '1.30x'\n    }, {\n      type: 'mult',\n      value: '1.20x'\n    }, {\n      type: 'mult',\n      value: '1.10x'\n    }, {\n      type: 'mult',\n      value: '1.01x'\n    }, {\n      type: 'mult',\n      value: '1.01x'\n    },\n    // раньше была змея\n    {\n      type: 'mult',\n      value: '1.01x'\n    }, {\n      type: 'mult',\n      value: '1.10x'\n    }, {\n      type: 'mult',\n      value: '1.20x'\n    }, {\n      type: 'mult',\n      value: '1.30x'\n    }, {\n      type: 'mult',\n      value: '2.00x'\n    }, {\n      type: 'snake'\n    } // теперь змея в правом нижнем углу\n    ];\n    const board = Array.from({\n      length: BOARD_SIZE\n    }, () => Array(BOARD_SIZE).fill({\n      type: 'empty'\n    }));\n    const path = generatePath();\n    for (let i = 0; i < path.length; i++) {\n      const {\n        x,\n        y\n      } = path[i];\n      board[y][x] = fixed[i];\n    }\n    return board;\n  }\n  // Новые параметры по таблице\n  const snakesCount = {\n    easy: 1,\n    medium: 3,\n    hard: 5,\n    expert: 7,\n    master: 9\n  }[difficulty];\n  const multiplierRanges = {\n    easy: [1.01, 2.00],\n    medium: [1.11, 4.00],\n    hard: [1.38, 7.50],\n    expert: [3.82, 10.00],\n    master: [17.64, 18.00]\n  };\n  const [minMult, maxMult] = multiplierRanges[difficulty];\n  const board = Array.from({\n    length: BOARD_SIZE\n  }, () => Array(BOARD_SIZE).fill({\n    type: 'empty'\n  }));\n  const path = generatePath();\n\n  // Случайно выбрать клетки для змей по маршруту (кроме старта)\n  const snakePositions = getRandomUnique([...Array(path.length - 1).keys()].map(i => i + 1), Math.min(snakesCount, path.length - 1));\n\n  // Генерация случайного множителя в диапазоне\n  function randomMultiplier() {\n    const val = Math.random() * (maxMult - minMult) + minMult;\n    return val.toFixed(2) + 'x';\n  }\n  for (let i = 0; i < path.length; i++) {\n    const {\n      x,\n      y\n    } = path[i];\n    if (i === 0) {\n      board[y][x] = {\n        type: 'start'\n      };\n    } else if (snakePositions.includes(i)) {\n      board[y][x] = {\n        type: 'snake'\n      };\n    } else {\n      board[y][x] = {\n        type: 'mult',\n        value: randomMultiplier()\n      };\n    }\n  }\n  return board;\n}\n\n// TEMP DEBUG: Print path indices and coordinates\nif (typeof window === 'undefined') {\n  const path = generatePath();\n  path.forEach((cell, idx) => {\n    console.log(`Index ${idx}: (${cell.x},${cell.y})`);\n  });\n}","map":{"version":3,"names":["BOARD_SIZE","generatePath","path","x","push","y","console","log","length","getRandomUnique","arr","count","copy","i","j","Math","floor","random","slice","generateBoard","difficulty","fixed","type","value","board","Array","from","fill","snakesCount","easy","medium","hard","expert","master","multiplierRanges","minMult","maxMult","snakePositions","keys","map","min","randomMultiplier","val","toFixed","includes","window","forEach","cell","idx"],"sources":["/Users/kokesh/snakes Somnia/src/utils/gameLogic.ts"],"sourcesContent":["// Генерирует маршрут: 5 вправо, 5 вниз, 5 влево, 5 вверх\nexport type PathCell = { x: number; y: number };\nexport type BoardCell =\n  | { type: 'empty' }\n  | { type: 'snake' }\n  | { type: 'mult'; value: string }\n  | { type: 'start' };\n\nexport const BOARD_SIZE = 4;\n\nexport function generatePath(): PathCell[] {\n  const path: PathCell[] = [];\n  // 4 вправо (y=0, x=0..3)\n  for (let x = 0; x < 4; x++) path.push({ x, y: 0 });\n  // 3 вниз (x=3, y=1..3)\n  for (let y = 1; y < 4; y++) path.push({ x: 3, y });\n  // 4 влево (y=3, x=3..0)\n  for (let x = 3; x >= 0; x--) path.push({ x, y: 3 });\n  // 2 вверх (x=0, y=2..1)\n  for (let y = 2; y >= 1; y--) path.push({ x: 0, y });\n  console.log('generatePath length:', path.length, path);\n  return path;\n}\n\nfunction getRandomUnique(arr: number[], count: number): number[] {\n  const copy = [...arr];\n  for (let i = copy.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [copy[i], copy[j]] = [copy[j], copy[i]];\n  }\n  return copy.slice(0, count);\n}\n\nexport function generateBoard(difficulty: 'easy'|'medium'|'hard'|'expert'|'master'): BoardCell[][] {\n  if (difficulty === 'easy') {\n    // Фиксированная структура для easy\n    // Индексы path: 0..12 по часовой стрелке, начиная сверху слева\n    // 0: старт, 1: 2.00x, 2: 1.30x, 3: 1.20x, 4: 1.10x, 5: 1.01x, 6: змея, 7: 1.01x, 8: 1.10x, 9: 1.20x, 10: 1.30x, 11: 2.00x, 12: 1.01x\n    const fixed: BoardCell[] = [\n      { type: 'start' as const },\n      { type: 'mult', value: '2.00x' },\n      { type: 'mult', value: '1.30x' },\n      { type: 'mult', value: '1.20x' },\n      { type: 'mult', value: '1.10x' },\n      { type: 'mult', value: '1.01x' },\n      { type: 'mult', value: '1.01x' }, // раньше была змея\n      { type: 'mult', value: '1.01x' },\n      { type: 'mult', value: '1.10x' },\n      { type: 'mult', value: '1.20x' },\n      { type: 'mult', value: '1.30x' },\n      { type: 'mult', value: '2.00x' },\n      { type: 'snake' as const }, // теперь змея в правом нижнем углу\n    ];\n    const board: BoardCell[][] = Array.from({ length: BOARD_SIZE }, () => Array(BOARD_SIZE).fill({ type: 'empty' }));\n    const path = generatePath();\n    for (let i = 0; i < path.length; i++) {\n      const { x, y } = path[i];\n      board[y][x] = fixed[i];\n    }\n    return board;\n  }\n  // Новые параметры по таблице\n  const snakesCount = { easy: 1, medium: 3, hard: 5, expert: 7, master: 9 }[difficulty];\n  const multiplierRanges: Record<string, [number, number]> = {\n    easy: [1.01, 2.00],\n    medium: [1.11, 4.00],\n    hard: [1.38, 7.50],\n    expert: [3.82, 10.00],\n    master: [17.64, 18.00],\n  };\n  const [minMult, maxMult] = multiplierRanges[difficulty];\n  const board: BoardCell[][] = Array.from({ length: BOARD_SIZE }, () => Array(BOARD_SIZE).fill({ type: 'empty' }));\n  const path = generatePath();\n\n  // Случайно выбрать клетки для змей по маршруту (кроме старта)\n  const snakePositions = getRandomUnique([...Array(path.length - 1).keys()].map(i => i + 1), Math.min(snakesCount, path.length - 1));\n\n  // Генерация случайного множителя в диапазоне\n  function randomMultiplier() {\n    const val = Math.random() * (maxMult - minMult) + minMult;\n    return val.toFixed(2) + 'x';\n  }\n\n  for (let i = 0; i < path.length; i++) {\n    const { x, y } = path[i];\n    if (i === 0) {\n      board[y][x] = { type: 'start' };\n    } else if (snakePositions.includes(i)) {\n      board[y][x] = { type: 'snake' };\n    } else {\n      board[y][x] = { type: 'mult', value: randomMultiplier() };\n    }\n  }\n  return board;\n}\n\n// TEMP DEBUG: Print path indices and coordinates\nif (typeof window === 'undefined') {\n  const path = generatePath();\n  path.forEach((cell, idx) => {\n    console.log(`Index ${idx}: (${cell.x},${cell.y})`);\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}