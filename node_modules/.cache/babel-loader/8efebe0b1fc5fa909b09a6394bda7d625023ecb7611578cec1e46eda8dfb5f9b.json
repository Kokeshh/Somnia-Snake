{"ast":null,"code":"// Генерирует маршрут: 5 вправо, 5 вниз, 5 влево, 5 вверх\n\nexport const BOARD_SIZE = 4;\nexport function generatePath() {\n  const path = [];\n  // Верхний ряд слева направо (x=0..3, y=0)\n  for (let x = 0; x < 4; x++) path.push({\n    x,\n    y: 0\n  });\n  // Правый столбец сверху вниз (x=3, y=1..3)\n  for (let y = 1; y < 4; y++) path.push({\n    x: 3,\n    y\n  });\n  // Нижний ряд справа налево (x=2..0, y=3)\n  for (let x = 2; x >= 0; x--) path.push({\n    x,\n    y: 3\n  });\n  // Левый столбец снизу вверх (x=0, y=2..1)\n  for (let y = 2; y > 0; y--) path.push({\n    x: 0,\n    y\n  });\n  return path;\n}\nfunction getRandomUnique(arr, count) {\n  const copy = [...arr];\n  for (let i = copy.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [copy[i], copy[j]] = [copy[j], copy[i]];\n  }\n  return copy.slice(0, count);\n}\nexport function generateBoard(difficulty) {\n  const snakesCount = {\n    easy: 4,\n    medium: 7,\n    hard: 10,\n    expert: 13,\n    master: 16\n  }[difficulty];\n  const board = Array.from({\n    length: 4\n  }, () => Array(4).fill({\n    type: 'empty'\n  }));\n  const path = generatePath();\n\n  // Случайно выбрать клетки для змей по всему маршруту (кроме старта)\n  const snakePositions = getRandomUnique([...Array(path.length - 1).keys()].map(i => i + 1), Math.min(snakesCount, path.length - 1));\n  // Индексы змей в path (не включая старт)\n\n  // Расставить змей\n  for (const idx of snakePositions) {\n    const {\n      x,\n      y\n    } = path[idx];\n    board[y][x] = {\n      type: 'snake'\n    };\n  }\n\n  // Множители на остальных клетках маршрута (кроме змей и старта)\n  const multipliers = ['1.20x', '1.30x', '2.00x', '1.10x', '1.01x', '1.30x', '1.20x', '1.10x', '1.01x', '2.00x', '1.30x', '1.20x', '1.10x', '1.01x', '1.30x', '1.20x', '1.10x', '1.01x', '2.00x', '1.30x'];\n  let multIdx = 0;\n  for (let i = 1; i < path.length; i++) {\n    if (!snakePositions.includes(i)) {\n      const {\n        x,\n        y\n      } = path[i];\n      board[y][x] = {\n        type: 'mult',\n        value: multipliers[multIdx % multipliers.length]\n      };\n      multIdx++;\n    }\n  }\n  // Стартовая клетка\n  const {\n    x: sx,\n    y: sy\n  } = path[0];\n  board[sy][sx] = {\n    type: 'start'\n  };\n  return board;\n}","map":{"version":3,"names":["BOARD_SIZE","generatePath","path","x","push","y","getRandomUnique","arr","count","copy","i","length","j","Math","floor","random","slice","generateBoard","difficulty","snakesCount","easy","medium","hard","expert","master","board","Array","from","fill","type","snakePositions","keys","map","min","idx","multipliers","multIdx","includes","value","sx","sy"],"sources":["/Users/kokesh/snakes Somnia/src/utils/gameLogic.ts"],"sourcesContent":["// Генерирует маршрут: 5 вправо, 5 вниз, 5 влево, 5 вверх\nexport type PathCell = { x: number; y: number };\nexport type BoardCell =\n  | { type: 'empty' }\n  | { type: 'snake' }\n  | { type: 'mult'; value: string }\n  | { type: 'start' };\n\nexport const BOARD_SIZE = 4;\n\nexport function generatePath(): PathCell[] {\n  const path: PathCell[] = [];\n  // Верхний ряд слева направо (x=0..3, y=0)\n  for (let x = 0; x < 4; x++) path.push({ x, y: 0 });\n  // Правый столбец сверху вниз (x=3, y=1..3)\n  for (let y = 1; y < 4; y++) path.push({ x: 3, y });\n  // Нижний ряд справа налево (x=2..0, y=3)\n  for (let x = 2; x >= 0; x--) path.push({ x, y: 3 });\n  // Левый столбец снизу вверх (x=0, y=2..1)\n  for (let y = 2; y > 0; y--) path.push({ x: 0, y });\n  return path;\n}\n\nfunction getRandomUnique(arr: number[], count: number): number[] {\n  const copy = [...arr];\n  for (let i = copy.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [copy[i], copy[j]] = [copy[j], copy[i]];\n  }\n  return copy.slice(0, count);\n}\n\nexport function generateBoard(difficulty: 'easy'|'medium'|'hard'|'expert'|'master'): BoardCell[][] {\n  const snakesCount = { easy: 4, medium: 7, hard: 10, expert: 13, master: 16 }[difficulty];\n  const board: BoardCell[][] = Array.from({ length: 4 }, () => Array(4).fill({ type: 'empty' }));\n  const path = generatePath();\n\n  // Случайно выбрать клетки для змей по всему маршруту (кроме старта)\n  const snakePositions = getRandomUnique([...Array(path.length - 1).keys()].map(i => i + 1), Math.min(snakesCount, path.length - 1));\n  // Индексы змей в path (не включая старт)\n\n  // Расставить змей\n  for (const idx of snakePositions) {\n    const { x, y } = path[idx];\n    board[y][x] = { type: 'snake' };\n  }\n\n  // Множители на остальных клетках маршрута (кроме змей и старта)\n  const multipliers = ['1.20x','1.30x','2.00x','1.10x','1.01x','1.30x','1.20x','1.10x','1.01x','2.00x','1.30x','1.20x','1.10x','1.01x','1.30x','1.20x','1.10x','1.01x','2.00x','1.30x'];\n  let multIdx = 0;\n  for (let i = 1; i < path.length; i++) {\n    if (!snakePositions.includes(i)) {\n      const { x, y } = path[i];\n      board[y][x] = { type: 'mult', value: multipliers[multIdx % multipliers.length] };\n      multIdx++;\n    }\n  }\n  // Стартовая клетка\n  const { x: sx, y: sy } = path[0];\n  board[sy][sx] = { type: 'start' };\n  return board;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}