{"ast":null,"code":"// Генерирует маршрут: 5 вправо, 5 вниз, 5 влево, 5 вверх\n\nexport function generatePath() {\n  const path = [];\n  // 5 вправо (y=0, x=0..4)\n  for (let x = 0; x < 5; x++) path.push({\n    x,\n    y: 0\n  });\n  // 5 вниз (x=4, y=1..4)\n  for (let y = 1; y < 5; y++) path.push({\n    x: 4,\n    y\n  });\n  // 5 влево (y=4, x=3..0)\n  for (let x = 3; x >= 0; x--) path.push({\n    x,\n    y: 4\n  });\n  // 5 вверх (x=0, y=3..0)\n  for (let y = 3; y >= 0; y--) path.push({\n    x: 0,\n    y\n  });\n  return path;\n}\nfunction getRandomUnique(arr, count) {\n  const copy = [...arr];\n  for (let i = copy.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [copy[i], copy[j]] = [copy[j], copy[i]];\n  }\n  return copy.slice(0, count);\n}\nexport function generateBoard(difficulty) {\n  const snakesCount = {\n    easy: 4,\n    medium: 7,\n    hard: 10,\n    expert: 13,\n    master: 16\n  }[difficulty];\n  const board = Array.from({\n    length: 5\n  }, () => Array(5).fill({\n    type: 'empty'\n  }));\n  // Случайно расставить змей по нижнему ряду\n  const snakeCols = getRandomUnique([0, 1, 2, 3, 4], Math.min(snakesCount, 5));\n  for (const col of snakeCols) {\n    board[4][col] = {\n      type: 'snake'\n    };\n  }\n  // Множители только по маршруту (кроме старта)\n  const path = generatePath();\n  const multipliers = ['1.20x', '1.30x', '2.00x', '1.10x', '1.01x', '1.30x', '1.20x', '1.10x', '1.01x', '2.00x', '1.30x', '1.20x', '1.10x', '1.01x', '1.30x', '1.20x', '1.10x', '1.01x', '2.00x', '1.30x'];\n  for (let i = 1; i < path.length; i++) {\n    const {\n      x,\n      y\n    } = path[i];\n    if (board[y][x].type !== 'snake') {\n      board[y][x] = {\n        type: 'mult',\n        value: multipliers[(i - 1) % multipliers.length]\n      };\n    }\n  }\n  // Стартовая клетка\n  board[0][0] = {\n    type: 'start'\n  };\n  return board;\n}","map":{"version":3,"names":["generatePath","path","x","push","y","getRandomUnique","arr","count","copy","i","length","j","Math","floor","random","slice","generateBoard","difficulty","snakesCount","easy","medium","hard","expert","master","board","Array","from","fill","type","snakeCols","min","col","multipliers","value"],"sources":["/Users/kokesh/snakes Somnia/src/utils/gameLogic.ts"],"sourcesContent":["// Генерирует маршрут: 5 вправо, 5 вниз, 5 влево, 5 вверх\nexport type PathCell = { x: number; y: number };\nexport type BoardCell =\n  | { type: 'empty' }\n  | { type: 'snake' }\n  | { type: 'mult'; value: string }\n  | { type: 'start' };\n\nexport function generatePath(): PathCell[] {\n  const path: PathCell[] = [];\n  // 5 вправо (y=0, x=0..4)\n  for (let x = 0; x < 5; x++) path.push({ x, y: 0 });\n  // 5 вниз (x=4, y=1..4)\n  for (let y = 1; y < 5; y++) path.push({ x: 4, y });\n  // 5 влево (y=4, x=3..0)\n  for (let x = 3; x >= 0; x--) path.push({ x, y: 4 });\n  // 5 вверх (x=0, y=3..0)\n  for (let y = 3; y >= 0; y--) path.push({ x: 0, y });\n  return path;\n}\n\nfunction getRandomUnique(arr: number[], count: number): number[] {\n  const copy = [...arr];\n  for (let i = copy.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [copy[i], copy[j]] = [copy[j], copy[i]];\n  }\n  return copy.slice(0, count);\n}\n\nexport function generateBoard(difficulty: 'easy'|'medium'|'hard'|'expert'|'master'): BoardCell[][] {\n  const snakesCount = { easy: 4, medium: 7, hard: 10, expert: 13, master: 16 }[difficulty];\n  const board: BoardCell[][] = Array.from({ length: 5 }, () => Array(5).fill({ type: 'empty' }));\n  // Случайно расставить змей по нижнему ряду\n  const snakeCols = getRandomUnique([0,1,2,3,4], Math.min(snakesCount, 5));\n  for (const col of snakeCols) {\n    board[4][col] = { type: 'snake' };\n  }\n  // Множители только по маршруту (кроме старта)\n  const path = generatePath();\n  const multipliers = ['1.20x','1.30x','2.00x','1.10x','1.01x','1.30x','1.20x','1.10x','1.01x','2.00x','1.30x','1.20x','1.10x','1.01x','1.30x','1.20x','1.10x','1.01x','2.00x','1.30x'];\n  for (let i = 1; i < path.length; i++) {\n    const { x, y } = path[i];\n    if (board[y][x].type !== 'snake') {\n      board[y][x] = { type: 'mult', value: multipliers[(i-1) % multipliers.length] };\n    }\n  }\n  // Стартовая клетка\n  board[0][0] = { type: 'start' };\n  return board;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}